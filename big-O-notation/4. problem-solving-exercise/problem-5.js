// Write a function that prints all pairs of elements from an array. What is the
// time complexity of this approach?

function printAllPairs(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      console.log(`(${arr[i]} ${arr[j]})`);
    }
  }
}

const array = [1, 2, 3];
printAllPairs(array);

// --------------------------------------------------------------------
// টাইম কমপ্লেক্সিটি বিশ্লেষণ:
// এই ফাংশনটি একটি অ্যারের প্রতিটি উপাদানকে অপর একটি উপাদানের সাথে জোড়া বানিয়ে প্রিন্ট করে।
// ফাংশনটিতে দুটি লুপ ব্যবহার করা হয়েছে:
//   1. বাইরের লুপ (i): এটি অ্যারের প্রতিটি উপাদানের উপর একবার করে চলে। যদি অ্যারেতে n টি
//      উপাদান থাকে, তাহলে বাইরের লুপ n বার চলবে।
//   2. ভেতরের লুপ (j): এটি প্রতিবার বাইরের লুপের একবার করে চলার জন্য পুরো অ্যারের উপর
//      আবার চলে। অর্থাৎ প্রতিবার বাইরের লুপের জন্য ভেতরের লুপ n বার চলবে।

// টাইম কমপ্লেক্সিটি:
// - বাইরের লুপ n বার চলে।
// - প্রতিটি বাইরের লুপের জন্য ভেতরের লুপ n বার চলে।

// সুতরাং, মোট অপারেশনের সংখ্যা হবে 𝑛×𝑛 বা 𝑛2

// টাইম কমপ্লেক্সিটি হলো: O(n^2)

// উদাহরণ:
// যদি ইনপুট অ্যারে [1, 2, 3] হয়, তাহলে এই ফাংশনটি নিচের জোড়াগুলো প্রিন্ট করবে:
// (1, 1)
// (1, 2)
// (1, 3)
// (2, 1)
// (2, 2)
// (2, 3)
// (3, 1)
// (3, 2)
// (3, 3)

// ব্যাখ্যা:
// ফাংশনটি একটি অ্যারের সব উপাদানের জোড়া তৈরি করে প্রিন্ট করে। বাইরের লুপ প্রতিটি উপাদান বেছে
// নেয় এবং ভেতরের লুপ সেই উপাদানের সাথে অন্য সব উপাদানের জোড়া তৈরি করে। যেহেতু লুপ
// দুটি নেস্ট করা হয়েছে (একটি লুপ অন্যটির ভিতরে), তাই টাইম কমপ্লেক্সিটি O(n^2) হয়।
// এটি "quadratic time complexity" নামে পরিচিত, যার মানে হলো ইনপুট
// আকার দ্বিগুণ হলে কাজের পরিমাণ চার গুণ বেড়ে যায়।
