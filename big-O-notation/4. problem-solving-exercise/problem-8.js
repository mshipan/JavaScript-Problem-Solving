// Write a function that sorts an array using Merge Sort. What is the time complexity
// of Merge Sort?

// Merge Sort
// Merge Sort হল একটি Divide and Conquer অ্যালগরিদম। এটি একটি অ্যারেকে দুটি সাব-অ্যারেতে
// ভাগ করে তারপর প্রতিটি সাব-অ্যারেকে আলাদা করে সর্ট করে, এবং অবশেষে ঐ দুটি সর্ট করা
// সাব-অ্যারেকে একত্রিত করে একটি সর্ট করা অ্যারে তৈরি করে।

function mergeSort(arr) {
  if (arr.length <= 1) {
    return arr; // যদি অ্যারেতে ১ বা ০ টি উপাদান থাকে, সেটি অলরেডি সর্ট করা
  }

  // অ্যারেকে মাঝখানে ভাগ করা
  const middle = Math.floor(arr.length / 2);
  const left = arr.slice(0, middle);
  const right = arr.slice(middle);

  // Recursive ভাবে ভাগ করা দুইটি অ্যারে সর্ট করা এবং Merge করে একত্রিত করা
  return merge(mergeSort(left), mergeSort(right));
}

function merge(left, right) {
  let arr = [],
    i = 0,
    j = 0;

  // দুটি সর্ট করা অ্যারে একত্রিত করে একটি সর্ট করা অ্যারে তৈরি করা
  while (i < left.length && j < right.length) {
    if (left[i] < right[j]) {
      arr.push(left[i]);
      i++;
    } else {
      arr.push(right[j]);
      j++;
    }
  }

  // অবশিষ্ট উপাদানগুলো একত্রিত করা
  return [...arr, ...left.slice(i), ...right.slice(j)];
}

const array = [38, 27, 43, 3, 9, 82, 10];
const array1 = mergeSort(array);
console.log(array1);

// ---------------------------------------------------------------------

// Merge Sort এর Time Complexity:

// 1. Divide Step:
// অ্যারেটিকে প্রতি ধাপে দুই ভাগে ভাগ করা হয়। একে আমরা Divide বলতে পারি। এই ভাগ করার
// প্রক্রিয়াটি O(log n) সময় নেয়, কারণ প্রতিবার অ্যারেটি অর্ধেক হয়ে যায় যতক্ষণ না একক
// উপাদানে পৌঁছে যায়।

// 2. Merge Step:
// প্রতিটি স্তরে দুইটি অ্যারে একত্রিত করার প্রক্রিয়া সম্পন্ন করা হয়। একত্রিত করার সময় O(n) লাগে,
// কারণ প্রতিটি উপাদানকে একবার করে তুলনা করতে হয় এবং একত্রিত করতে হয়।

// 3. সমগ্র প্রক্রিয়ার টাইম কমপ্লেক্সিটি:
// এই দুই ধাপ একসাথে করলে, Merge Sort এর সময় জটিলতা হয়:

// - Divide করার জন্য O(log n)।
// - Merge করার জন্য O(n)।

// এখন, প্রতিটি স্তরে অ্যারেকে O(n) সময় লাগে, এবং এই স্তরগুলোর সংখ্যা হয় O(log n)। সুতরাং সমগ্র
// অ্যালগরিদমের টাইম কমপ্লেক্সিটি হয় O(n log n)।

// ব্যাখ্যা:
// Merge Sort একটি খুবই কার্যকর সর্টিং অ্যালগরিদম যা O(n log n) টাইম কমপ্লেক্সিটিতে কাজ করে।
// এর মানে হল অ্যারেটি যত বড়ই হোক না কেন, এটি দ্রুতগতিতে কাজ করতে সক্ষম কারণ প্রতিটি
// ধাপে অ্যারেটিকে ভাগ করা হয় এবং তারপর একত্রিত করা হয়।

// উদাহরণ হিসেবে ধরা যাক একটি 8 উপাদানের অ্যারে। প্রথমে এটি 4 এবং 4 উপাদানে ভাগ হবে, তারপর
// আবার 2 এবং 2, অবশেষে 1 উপাদান। তারপর এই 1 উপাদানগুলো একত্রিত করে সর্ট করা অ্যারে
// তৈরি করা হবে।
