// Write a function that performs binary search on a sorted array of integers.
// What is the time complexity of your binary search implementation?

function binarySearch(arr, target) {
  let left = 0,
    right = arr.length - 1;
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (arr[mid] === target) {
      return mid; // Target found, return index
    } else if (arr[mid] < target) {
      left = mid + 1; // Target is in the right half
    } else {
      right = mid - 1; // Target is in the left half
    }
  }
  return -1; // Target not found
}

const array = [1, 2, 4, 7, 9, 12, 15];

console.log(binarySearch(array, 9));

// -------------------------------------------------------------------------

// উদাহরণ:
// ধরা যাক, আমাদের একটি সর্ট করা ইনপুট অ্যারে arr = [1, 2, 4, 7, 9, 12, 15] এবং আমাদের
// টার্গেট target = 9। এই ফাংশনটি দ্বৈত বিভাজন করে টার্গেট উপাদানটি খুঁজবে এবং তার ইনডেক্স
// 4 রিটার্ন করবে।

// টাইম কমপ্লেক্সিটি বিশ্লেষণ:
// - বাইনারি সার্চ একটি কার্যকরী অনুসন্ধান পদ্ধতি যা শুধুমাত্র সর্ট করা অ্যারের উপর কাজ করে।
// - প্রতি ইটারেশনে, এটি অ্যারেটির মাঝের উপাদানটি পরীক্ষা করে এবং টার্গেট উপাদানটি সেই মাঝের
//   উপাদানটি কিনা তা দেখে।
// - যদি না হয়, তাহলে এটি অ্যারেটির অর্ধেক অংশ বাদ দিয়ে অবশিষ্ট অর্ধেক অংশে অনুসন্ধান চালায়।
// - প্রতিবার অ্যারের আকার অর্ধেক হয়ে যায়, যতক্ষণ না টার্গেটটি পাওয়া যায় অথবা অনুসন্ধান শেষ হয়।

// টাইম কমপ্লেক্সিটি:
// প্রতি ধাপে আমরা অ্যারের আকার অর্ধেক করছি। ধরুন অ্যারেটির আকার n। তাহলে কতবার অ্যারের
// আকার অর্ধেক হবে তার সংখ্যা নির্ধারণ করে টাইম কমপ্লেক্সিটি বের করা যায়।
// - প্রথম ধাপে, অ্যারের আকার: n
// - দ্বিতীয় ধাপে, আকার: n/2
// - তৃতীয় ধাপে, আকার: n/4
// - এইভাবে ধীরে ধীরে অ্যারের আকার কমতে থাকে যতক্ষণ না আকার 1 এ পৌঁছে।

// অতিরিক্তভাবে, এই ধরনের log2(n) ধাপ থাকবে, যেখানে log হলো লঘারিদমিক অপারেশন।

// টাইম কমপ্লেক্সিটি হলো: O(log n)

// ব্যাখ্যা:
// বাইনারি সার্চ খুবই কার্যকর একটি পদ্ধতি কারণ এটি প্রতিটি ধাপে অ্যারের অর্ধেক অংশ বাদ দেয়,
// অর্থাৎ একটি বৃহৎ ইনপুট অ্যারেতেও এটি কম সংখ্যক ধাপে সমাধান খুঁজে পায়। তাই এটি
// O(log n) টাইম কমপ্লেক্সিটির সাথে কাজ করে।
