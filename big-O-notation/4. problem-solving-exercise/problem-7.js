// Consider a function that searches for an element in an unsorted array.
// What would be the best case, worst case, and average case time complexity?

// একটি আনসর্টেড অ্যারেতে (unsorted array) কোনও একটি উপাদান খুঁজতে গেলে আমরা সাধারণত
// লিনিয়ার সার্চ (linear search) ব্যবহার করি। এই পদ্ধতিতে আমরা অ্যারেটির প্রতিটি উপাদান একের
// পর এক চেক করে দেখি যে কোনও উপাদান আমাদের টার্গেট উপাদানের সাথে মিলে কিনা।

function linearSearch(arr, target) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target) {
      return i; // টার্গেট উপাদান পাওয়া গেলে তার ইনডেক্স রিটার্ন করবে
    }
  }
  return -1; // টার্গেট না পাওয়া গেলে -1 রিটার্ন করবে
}

const arr = [5, 3, 8, 4, 2, 7];
const target = 4;
console.log(linearSearch(arr, target)); // Output: 3

// এই ফাংশনে, আমরা অ্যারের প্রতিটি উপাদান একের পর এক চেক করছি।

// টাইম কমপ্লেক্সিটি বিশ্লেষণ:
// লিনিয়ার সার্চের টাইম কমপ্লেক্সিটি নির্ভর করে কোন অবস্থায় টার্গেট উপাদানটি পাওয়া যাচ্ছে। এখানে তিনটি
// প্রধান অবস্থা আছে: বেস্ট কেস, ওয়ার্স্ট কেস, এবং অ্যাভারেজ কেস।

// --------------------------------------------------------------------------

// বেস্ট কেস:
// বেস্ট কেস হল যখন টার্গেট উপাদানটি অ্যারের প্রথমেই পাওয়া যায়। এই ক্ষেত্রে, প্রথম ইটারেশনের
// (loop iteration) মধ্যেই উপাদানটি খুঁজে পাওয়া যায় এবং সার্চ শেষ হয়।

// - উদাহরণ: [4, 3, 8, 5, 6] অ্যারেতে টার্গেট যদি 4 হয়, তাহলে প্রথমেই এটি পাওয়া যাবে।
// - বেস্ট কেস টাইম কমপ্লেক্সিটি: O(1)

// কারণ প্রথম ইটারেশনেই উপাদান পাওয়া গেলে আমরা এক ধাপেই সমাধান পেয়ে যাই, তাই এটি
// কনস্ট্যান্ট টাইমে (constant time) সমাধান হয়।

// ------------------------------------------------------------------------------

// ওয়ার্স্ট কেস:
// ওয়ার্স্ট কেস হল যখন টার্গেট উপাদানটি অ্যারের শেষ উপাদানে থাকে বা অ্যারেতে থাকে না। এই ক্ষেত্রে,
// পুরো অ্যারে ট্রাভার্স করতে হয়, অর্থাৎ প্রতিটি উপাদান চেক করতে হয়।

// - উদাহরণ: [4, 3, 8, 5, 6] অ্যারেতে যদি টার্গেট হয় 6 বা 9 (যা নেই), তাহলে অ্যারেটির শেষ পর্যন্ত
//   চেক করতে হবে।
// - ওয়ার্স্ট কেস টাইম কমপ্লেক্সিটি: O(n)

// কারণ অ্যারেটির প্রতিটি উপাদান চেক করা লাগবে, তাই টাইম কমপ্লেক্সিটি হবে O(n), যেখানে n হলো
// অ্যারেটির দৈর্ঘ্য।

// ---------------------------------------------------------------------------

// অ্যাভারেজ কেস:
// অ্যাভারেজ কেস হল যখন টার্গেট উপাদানটি কোথাও মধ্যবর্তী অবস্থায় পাওয়া যায়। এই ক্ষেত্রে আমরা
// সাধারণত অ্যারের অর্ধেক উপাদান চেক করার পর উপাদানটি পাই।

// - উদাহরণ: [4, 3, 8, 5, 6] অ্যারেতে যদি টার্গেট হয় 8, তাহলে আমরা মোটামুটি অ্যারেটির অর্ধেক
//   চেক করার পর এটি পাবো।
// - অ্যাভারেজ কেস টাইম কমপ্লেক্সিটি: O(n/2), তবে Big-O নোটেশনে এটি সাধারণত O(n) হিসাবে প্রকাশ
//   করা হয়।

// কারণ অ্যারেটির মধ্যবর্তী অবস্থানে উপাদান পাওয়া যায় বলে আমরা প্রায় অর্ধেক ইটারেশন পর্যন্ত যেতে পারি,
// কিন্তু Big-O নোটেশনে কনস্ট্যান্ট ফ্যাক্টরগুলি উপেক্ষা করা হয়, তাই এটিও O(n) হিসাবে গণ্য করা হয়।

// ----------------------------------------------------------------------------

// সারসংক্ষেপ:
// - বেস্ট কেস: প্রথমেই উপাদান পাওয়া গেলে, টাইম কমপ্লেক্সিটি হবে O(1)।
// - ওয়ার্স্ট কেস: যদি পুরো অ্যারে চেক করতে হয়, তাহলে টাইম কমপ্লেক্সিটি হবে O(n)।
// - অ্যাভারেজ কেস: সাধারণত মধ্যবর্তী ইন্ডেক্সে উপাদান পাওয়া যায়, তাই অ্যাভারেজ টাইম কমপ্লেক্সিটি
//   হবে O(n)।

// লিনিয়ার সার্চ একটি সহজ পদ্ধতি হলেও আনসর্টেড অ্যারের ক্ষেত্রে এটি ওয়ার্স্ট কেসে ধীরগতিতে কাজ করে,
// যেখানে বাইনারি সার্চের মতো উন্নত পদ্ধতিগুলি শুধু সর্ট করা অ্যারেতে দ্রুত সমাধান দেয়।
