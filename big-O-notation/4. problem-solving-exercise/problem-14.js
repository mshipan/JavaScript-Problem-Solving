// Write a recursive function to calculate the nth Fibonacci number. What is the
// time complexity of your recursive solution?

function fibonacci(n) {
  if (n <= 1) {
    return n;
  }
  return fibonacci(n - 1) + fibonacci(n - 2);
}

console.log(fibonacci(7));

// ------------------------------------------------------------

// ব্যাখ্যা:
// ফিবোনাচ্চি সিরিজ হলো এমন একটি সিরিজ যেখানে প্রতিটি সংখ্যা তার পূর্বের দুটি সংখ্যার যোগফল।
// উদাহরণস্বরূপ:
// - ফিবোনাচ্চি সিরিজের শুরু হলো: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...
// - সিরিজের প্রথম সংখ্যা 0, দ্বিতীয় সংখ্যা 1।
// - এরপরের প্রতিটি সংখ্যা তার পূর্বের দুটি সংখ্যার যোগফল।

// এই কোডে fibonacci(n) ফাংশনটি n-তম ফিবোনাচ্চি সংখ্যা বের করতে রিকার্শন (recursive)
// পদ্ধতি ব্যবহার করছে। যদি n এর মান 0 বা 1 হয়, তাহলে সরাসরি n ফেরত দেয়। অন্যথায়,
// এটি পূর্বের দুটি সংখ্যার যোগফল (fibonacci(n-1) + fibonacci(n-2)) রিটার্ন করে।

// টাইম কমপ্লেক্সিটি (Time Complexity):
// এই রিকার্সিভ ফিবোনাচ্চি সমাধানটির টাইম কমপ্লেক্সিটি হলো O(2^n)।
// কারণ:
// প্রত্যেক কল দুটি রিকার্সিভ কল করে, যা এক্সপোনেনশিয়ালি বড় হয়। ফিবোনাচ্চি n-কে বের করার জন্য
// এটি n-এর জন্য প্রায় 2^n সংখ্যক রিকার্সিভ কল তৈরি করে।

// উদাহরণস্বরূপ, যদি আপনি 7-তম ফিবোনাচ্চি সংখ্যা বের করতে চান, এটি একাধিকবার একই সাবপ্রব্লেমগুলো
// সমাধান করবে। এজন্যই এই সমাধানটি ধীরে কাজ করে।
