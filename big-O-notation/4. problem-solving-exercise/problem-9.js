// You are given three algorithms with time complexities: O(n), O(n^2), and O(log n).
// Which one would be the most efficient for very large inputs? Explain why.

// তিনটি টাইম কমপ্লেক্সিটির মধ্যে:

// O(n)
// O(n^2)
// O(log n)
// সবচেয়ে কার্যকর টাইম কমপ্লেক্সিটি কোনটি এবং কেন:

// O(log n) টাইম কমপ্লেক্সিটি সবচেয়ে কার্যকর হবে খুব বড় ইনপুটের জন্য। এর কারণ হল:

// 1. O(log n):

//    - এখানে টাইম কমপ্লেক্সিটি লোগারিদমিক। লোগারিদমিক টাইম কমপ্লেক্সিটির অর্থ হল প্রতিবার
//      ইনপুট বাড়লেও, অ্যালগরিদম খুব দ্রুত কাজ করে। ইনপুটের আকার দ্বিগুণ হলেও, কাজের
//      সময় খুব সামান্য বাড়ে। উদাহরণস্বরূপ, ১০০০ ইনপুটের জন্য অ্যালগরিদম হয়তো মাত্র
//      ১০ বার কাজ করবে।
//    - তাই, বড় ইনপুটের ক্ষেত্রে এটি সবচেয়ে কার্যকর।

// 2. O(n):
//    - লিনিয়ার টাইম কমপ্লেক্সিটি। ইনপুট যত বাড়ে, কাজের সময়ও সরাসরি তার সাথে বাড়ে। তবে এটি
//      এখনও বেশ কার্যকর, কিন্তু O(log n) এর মতো দ্রুত নয়।
//    - উদাহরণস্বরূপ, ১০০০ ইনপুটের জন্য এটি ১০০০ বার কাজ করবে।

// 3. O(n^2):
//    - বর্গ টাইম কমপ্লেক্সিটি, যা সবচেয়ে ধীরগতির। ইনপুট বাড়ার সাথে সাথে কাজের সময় বহুগুণে বাড়ে।
//      বড় ইনপুটের ক্ষেত্রে এটি অত্যন্ত ধীর।
//    - উদাহরণস্বরূপ, ১০০০ ইনপুটের জন্য এটি ১০০০ * ১০০০ = ১০,০০০০০ বার কাজ করবে।

// O(log n) টাইম কমপ্লেক্সিটি সবচেয়ে কার্যকর কারণ এটি বড় ইনপুটের ক্ষেত্রেও খুব দ্রুত কাজ
// করতে সক্ষম। অন্যদিকে, O(n^2) টাইম কমপ্লেক্সিটি বড় ইনপুটের জন্য খুব ধীর হবে, এবং
// O(n) মাঝামাঝি কার্যকর, তবে O(log n) এর মতো ভালো নয়।
