// 1. var
//    - স্কোপ: var ফাংশন-স্কোপড। অর্থাৎ, var দিয়ে ডিক্লেয়ার করা ভেরিয়েবল শুধুমাত্র ফাংশনের ভিতরে অ্যাক্সেসযোগ্য থাকে যদি সেটি কোনো ফাংশনের ভিতরে ডিক্লেয়ার করা হয়,
//      অথবা যদি বাইরে ডিক্লেয়ার করা হয় তবে সেটি গ্লোবালি অ্যাক্সেসযোগ্য হয়।
//    - হোইস্টিং: var দিয়ে ডিক্লেয়ার করা ভেরিয়েবলগুলি তাদের স্কোপের উপরে উঠিয়ে নেওয়া হয় (হোইস্ট করা হয়), যার মানে ডিক্লেয়ার করার আগে সেগুলো অ্যাক্সেস করা যায়,
//      যদিও তাদের মান undefined থাকবে যতক্ষণ না পর্যন্ত তাদের ইনিশিয়ালাইজ করা হয়।
//    - পুনরায় ডিক্লারেশন (Re-declaration): একই স্কোপের মধ্যে আপনি একাধিকবার var দিয়ে ভেরিয়েবল ডিক্লেয়ার করতে পারেন, যা কখনো কখনো অপ্রত্যাশিত আচরণ তৈরি করতে পারে।

function example() {
  console.log(x); // undefined (হোইস্টিং এর কারণে)
  var x = 10;
  console.log(x); // 10

  var x = 20;
  console.log(x); // 20
}

example();

// 2. let
//    - স্কোপ: let ব্লক-স্কোপড, অর্থাৎ এটি শুধুমাত্র সেই ব্লকের মধ্যে অ্যাক্সেসযোগ্য থাকে যেখানে এটি ডিক্লেয়ার করা হয়েছে (যেমন {} এর ভিতরে)।
//    - হোইস্টিং: let ও হোইস্ট করা হয়, কিন্তু var এর মত এটি undefined দিয়ে ইনিশিয়ালাইজ করা হয় না। ডিক্লেয়ার করার আগে let ভেরিয়েবল অ্যাক্সেস করলে ReferenceError হবে।
//      ডিক্লেয়ার করার আগের সময়টিকে "Temporal Dead Zone" বলা হয়।
//    - পুনরায় ডিক্লারেশন: একই স্কোপের মধ্যে আপনি let দিয়ে ভেরিয়েবল পুনরায় ডিক্লেয়ার করতে পারবেন না।

function example2() {
  // console.log(y); // ReferenceError (Temporal Dead Zone)
  let y = 10;
  console.log(y); // 10

  if (true) {
    let y = 20;
    console.log(y); // 20 (ব্লক-স্কোপড ভেরিয়েবল)
  }

  console.log(y); // 10 (মূল ব্লক স্কোপ)
}

example2();

// 3. const
//    - স্কোপ: const ও let এর মত ব্লক-স্কোপড।
//    - হোইস্টিং: const ও হোইস্ট করা হয়, কিন্তু let এর মতই এটি "Temporal Dead Zone" এ থাকে।
//    - পুনরায় ডিক্লারেশন: const একই স্কোপে পুনরায় ডিক্লেয়ার করা যায় না।
//    - অ্যাসাইনমেন্ট: const ভেরিয়েবল ডিক্লেয়ার করার সময়ই ইনিশিয়ালাইজ করতে হয় এবং এর মান পরিবর্তন করা যায় না।
//      তবে, যদি মানটি একটি অবজেক্ট বা অ্যারের হয়, তাহলে সেই অবজেক্ট বা অ্যারের প্রোপার্টি বা এলিমেন্ট পরিবর্তন করা যায়।

function example3() {
  const z = 10;
  console.log(z); // 10

  // z = 20; // TypeError: Assignment to constant variable.

  const obj = { key: "value" };
  obj.key = "newValue"; // অনুমোদিত, কারণ আমরা অবজেক্টটি পরিবর্তন করছি, ভেরিয়েবলটি নয়
  console.log(obj); // { key: 'newValue' }

  // const z = 30; // SyntaxError: Identifier 'z' has already been declared
}

example3();
