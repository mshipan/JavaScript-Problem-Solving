// Encapsulation হলো Object-Oriented Programming (OOP) এর একটি মৌলিক ধারণা যেখানে ডেটা এবং এর সাথে সম্পর্কিত ফাংশন বা মেথডগুলোকে একসাথে এক জায়গায় সংরক্ষণ করা হয় এবং
// বাইরের অবজেক্ট বা প্রোগ্রামের অংশ থেকে সরাসরি অ্যাক্সেস প্রতিরোধ করা হয়। সহজভাবে বললে, ইনক্যাপসুলেশন হলো ডেটা এবং কোডের জটিলতাগুলোকে লুকিয়ে রেখে বাইরের
// অংশের সাথে শুধু প্রয়োজনীয় যোগাযোগ করার প্রক্রিয়া।

// **** ইনক্যাপসুলেশনের মূল ধারণা: ****
// - ডেটা হাইডিং (Data Hiding): ডেটাকে সরাসরি বাইরের অবজেক্ট বা ফাংশন থেকে পরিবর্তন বা অ্যাক্সেস করা প্রতিরোধ করা হয়।
//   এর ফলে ডেটার ইন্টিগ্রিটি বজায় থাকে এবং অনাকাঙ্ক্ষিত পরিবর্তন এড়ানো যায়।

// - অ্যাক্সেস মডিফায়ারস (Access Modifiers): ইনক্যাপসুলেশনের জন্য বিভিন্ন অ্যাক্সেস মডিফায়ারস (যেমন, private, public, protected) ব্যবহার করা হয়
//   যা প্রপার্টি এবং মেথডগুলোকে বাইরের অ্যাক্সেস থেকে নিয়ন্ত্রণ করে। জাভাস্ক্রিপ্টে ES6+ এ প্রাইভেট ফিল্ড বা মেথড চিহ্নিত করতে # সিম্বল ব্যবহার করা হয়।

// - গেটারস এবং সেটারস (Getters and Setters): প্রাইভেট ডেটা বা প্রপার্টিগুলোকে বাইরের অ্যাক্সেসের জন্য প্রকাশ করার জন্য getter এবং setter মেথড ব্যবহার করা হয়।
//   এর মাধ্যমে ডেটার মান পাবলিক অ্যাক্সেস দেওয়া হলেও তা নিয়ন্ত্রিতভাবে করা হয়।

// উদাহরণস্বরূপ:
// ধরা যাক আমরা একটি BankAccount ক্লাস তৈরি করছি, যেখানে অ্যাকাউন্ট ব্যালেন্সের ডেটা প্রাইভেট রাখা হবে এবং শুধুমাত্র নির্দিষ্ট মেথডের মাধ্যমে তা অ্যাক্সেস এবং পরিবর্তন করা যাবে।

class BankAccount {
  #balance; // প্রাইভেট ফিল্ড

  constructor(initialBalance) {
    this.#balance = initialBalance;
  }

  // Getter মেথড
  getBalance() {
    return this.#balance;
  }

  // Setter মেথড
  deposit(amount) {
    if (amount > 0) {
      this.#balance += amount;
      console.log(`Deposited: $${amount}. New Balance: $${this.#balance}`);
    } else {
      console.log("Deposit amount must be positive.");
    }
  }

  // Withdraw মেথড
  withdraw(amount) {
    if (amount > 0 && amount <= this.#balance) {
      this.#balance -= amount;
      console.log(`Withdrawn: $${amount}. New Balance: $${this.#balance}`);
    } else {
      console.log("Invalid withdraw amount.");
    }
  }
}

const account = new BankAccount(1000);
console.log(account.getBalance()); // Output: 1000
account.deposit(500); // Output: Deposited: $500. New Balance: $1500
account.withdraw(200); // Output: Withdrawn: $200. New Balance: $1300

// প্রাইভেট প্রপার্টি ডিরেক্টলি অ্যাক্সেস করা যাবে না
// console.log(account.#balance);   // Error: Private field '#balance' must be declared in an enclosing class

// উদাহরণ বিশ্লেষণ:

// 1. প্রাইভেট ফিল্ড #balance:
//    - #balance একটি প্রাইভেট ফিল্ড, যা ক্লাসের বাইরে থেকে সরাসরি অ্যাক্সেস করা যাবে না। এটি শুধুমাত্র BankAccount ক্লাসের মেথডগুলোর মাধ্যমে অ্যাক্সেস করা যায়।
//      এইভাবে, ব্যালেন্সের ডেটা বাইরের প্রোগ্রাম বা অবজেক্ট দ্বারা পরিবর্তিত হতে পারে না, যা ডেটার নিরাপত্তা নিশ্চিত করে।

// 2. Getter এবং Setter মেথড:
//    - getBalance() মেথডটি ব্যালেন্সের মান রিটার্ন করে, কিন্তু এটি কোনো পরিবর্তন করতে পারে না।
//      deposit() এবং withdraw() মেথডগুলো ব্যবহারকারীর কাছ থেকে ইনপুট নিয়ে ব্যালেন্স আপডেট করে, কিন্তু সেই আপডেটগুলি একটি লজিক্যাল চেকের মাধ্যমে নিয়ন্ত্রণ করা হয়।
//      যেমন, deposit() মেথডে শুধুমাত্র পজিটিভ পরিমাণ ডিপোজিট করা যাবে এবং withdraw() মেথডে শুধুমাত্র নির্দিষ্ট পরিমাণ অর্থই তুলতে দেওয়া হবে যা ব্যালেন্সের মধ্যে থাকে।

// 3. ডেটা হাইডিং:
//    - প্রাইভেট ফিল্ড #balance সরাসরি বাইরের প্রোগ্রাম থেকে অ্যাক্সেস করা যাবে না। এটি কেবলমাত্র ক্লাসের ভিতরে থাকা মেথডগুলোর মাধ্যমে নিয়ন্ত্রিত হয়।
//      এর ফলে ডেটা সুরক্ষিত থাকে এবং অনিচ্ছাকৃত বা ভুল ডেটা ম্যানিপুলেশন এড়ানো যায়।

// ইনক্যাপসুলেশনের উপকারিতা:
// 1. ডেটার সুরক্ষা: ইনক্যাপসুলেশনের মাধ্যমে ডেটা প্রাইভেট রাখা যায়, যা বাইরের অবজেক্ট দ্বারা পরিবর্তন প্রতিরোধ করে। এটি ডেটার ইন্টিগ্রিটি রক্ষা করে।

// 2. কোডের মডুলারিটি: কোডের অংশগুলোকে স্বাধীনভাবে তৈরি করা যায় এবং বাইরের অংশের সাথে শুধুমাত্র প্রয়োজনীয় তথ্য বা ফাংশনালিটি শেয়ার করা হয়। এটি কোডের পুনঃব্যবহারযোগ্যতা এবং মডুলারিটি বাড়ায়।

// 3. বাগ প্রতিরোধ: ইনক্যাপসুলেশন বাগ (Bug) বা ভুল থেকে রক্ষা করে, কারণ বাইরের অংশ সরাসরি ডেটা বা প্রপার্টিগুলোতে হস্তক্ষেপ করতে পারে না।

// 4. রক্ষণাবেক্ষণ সহজ: প্রাইভেট ডেটা বা প্রপার্টিগুলো পরিবর্তন করা হলে বাইরের অংশে কোনো প্রভাব ফেলে না। এর ফলে কোডের রক্ষণাবেক্ষণ সহজ হয়।
