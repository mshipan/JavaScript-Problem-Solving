// 1. স্প্রেড অপারেটর (Spread Operator):
//    স্প্রেড অপারেটরকে ... দিয়ে প্রকাশ করা হয় এবং এটি কোনো iterable (যেমন অ্যারে, অবজেক্ট) কে একাধিক উপাদানে ভেঙে ফেলে। সহজ কথায়,
//    এটি কোনো অ্যারে বা অবজেক্টের উপাদানগুলোকে আলাদা করে দেয়।

//    উদাহরণ ১: অ্যারের ক্ষেত্রে স্প্রেড অপারেটর
const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5];

console.log(newNumbers); // Output: [1, 2, 3, 4, 5]
// এখানে ...numbers ব্যবহার করে numbers অ্যারের সমস্ত উপাদানকে newNumbers অ্যারের মধ্যে স্প্রেড করা হয়েছে, এবং পরে নতুন উপাদান যোগ করা হয়েছে।

//    উদাহরণ ২: অবজেক্টের ক্ষেত্রে স্প্রেড অপারেটর
const person = {
  name: "John",
  age: 25,
};

const updatedPerson = {
  ...person,
  city: "New York",
};

console.log(updatedPerson);
// Output: { name: "John", age: 25, city: "New York" }

// এখানে ...person ব্যবহার করে person অবজেক্টের সমস্ত প্রপার্টিকে updatedPerson অবজেক্টে স্প্রেড করা হয়েছে, এবং নতুন প্রপার্টি যোগ করা হয়েছে।

// 2. রেস্ট অপারেটর (Rest Operator):
//    রেস্ট অপারেটরকেও ... দিয়ে প্রকাশ করা হয়, তবে এটি স্প্রেড অপারেটরের বিপরীত কাজ করে। এটি একাধিক উপাদানকে একটি একক অ্যারে বা অবজেক্টে গুছিয়ে ফেলে।
//    এটি সাধারণত ফাংশনের প্যারামিটার হিসেবে ব্যবহার করা হয়, যেখানে একাধিক আর্গুমেন্টকে একটি অ্যারেতে রূপান্তর করতে হয়।

//    উদাহরণ ১: ফাংশনে রেস্ট অপারেটর

function sum(...numbers) {
  return numbers.reduce((total, num) => total + num, 0);
}

console.log(sum(1, 2, 3, 4)); // Output: 10
// এখানে ...numbers ব্যবহার করে ফাংশনে প্রদত্ত সমস্ত আর্গুমেন্টকে একটি অ্যারে হিসেবে numbers এ রাখা হয়েছে, তারপর এই অ্যারের উপাদানগুলোর যোগফল করা হয়েছে।

//    উদাহরণ ২: অবজেক্টের ক্ষেত্রে রেস্ট অপারেটর

const { name, ...rest } = { name: "John", age: 25, city: "New York" };

console.log(name); // Output: "John"
console.log(rest); // Output: { age: 25, city: "New York" }
// এখানে { name, ...rest } ব্যবহার করে অবজেক্টের প্রথম প্রপার্টিকে আলাদা করা হয়েছে এবং বাকি প্রপার্টিগুলোকে rest অবজেক্টে রাখা হয়েছে।
