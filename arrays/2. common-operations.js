// অ্যারের উপরে বিভিন্ন ধরনের অপারেশনস করা যায়, যা আমাদের অ্যারেতে উপাদান যোগ করা, মুছে
// ফেলা বা পরিবর্তন করতে সাহায্য করে। জাভাস্ক্রিপ্ট অ্যারেতে অনেক ইনবিল্ট মেথড দেয় যা এই
// অপারেশনগুলো করতে ব্যবহৃত হয়। নিচে সাধারণ কিছু অপারেশনস এবং তাদের বর্ণনা দেওয়া হলো:

// ----------------------------------------------------------------------------

// 1. push(): অ্যারের শেষে উপাদান যোগ করা
// push() মেথড ব্যবহার করে অ্যারের শেষে এক বা একাধিক উপাদান যোগ করা হয়।

// উদাহরণ:
//  let arr = [1, 2, 3];
//  arr.push(4);
//  console.log(arr); // আউটপুট: [1, 2, 3, 4]

// Time Complexity: O(1) (কারণ নতুন উপাদান যোগ করার জন্য শুধুমাত্র শেষে নতুন জায়গা তৈরি হয়)।

// ----------------------------------------------------------------------------

// 2. pop(): অ্যারের শেষের উপাদান সরিয়ে ফেলা
// pop() মেথড অ্যারের শেষের উপাদানটি সরিয়ে ফেলে এবং সেই উপাদানটি রিটার্ন করে।

// উদাহরণ:
//  let arr = [1, 2, 3];
//  let removedElement = arr.pop();
//  console.log(arr);  // আউটপুট: [1, 2]
//  console.log(removedElement);  // আউটপুট: 3

// Time Complexity: O(1) (কারণ এটি শুধু শেষের উপাদান সরিয়ে ফেলে)।

// ----------------------------------------------------------------------------

// 3. shift(): অ্যারের শুরু থেকে উপাদান সরিয়ে ফেলা
// shift() মেথড অ্যারের প্রথম উপাদান সরিয়ে ফেলে এবং রিটার্ন করে। বাকি উপাদানগুলোকে এক ধাপ
// বাম দিকে সরানো হয়।

// উদাহরণ:
//  let arr = [1, 2, 3];
//  let removedElement = arr.shift();
//  console.log(arr);  // আউটপুট: [2, 3]
//  console.log(removedElement);  // আউটপুট: 1

// Time Complexity: O(n) (কারণ প্রথম উপাদান সরানোর পর সব উপাদানকে এক ধাপ বাম দিকে
// সরাতে হয়)।

// ----------------------------------------------------------------------------

// 4. unshift(): অ্যারের শুরুতে উপাদান যোগ করা
// unshift() মেথড অ্যারের শুরুতে এক বা একাধিক উপাদান যোগ করে। বাকি উপাদানগুলোকে ডান
// দিকে সরানো হয়।

// উদাহরণ:
//  let arr = [2, 3];
//  arr.unshift(1);
//  console.log(arr);  // আউটপুট: [1, 2, 3]

// Time Complexity: O(n) (কারণ প্রথমে নতুন উপাদান যোগ করা হয়, তারপর বাকি উপাদানগুলোকে
// ডান দিকে সরাতে হয়)।

// ----------------------------------------------------------------------------

// 5. splice(): নির্দিষ্ট ইনডেক্স থেকে উপাদান যোগ বা মুছে ফেলা
// splice() মেথড ব্যবহার করে অ্যারের যেকোনো স্থানে উপাদান যোগ বা মুছে ফেলা যায়। এটি
// একটি শক্তিশালী অপারেশন।

// সিনট্যাক্স:
//  array.splice(startIndex, deleteCount, item1, item2, ...)

// উদাহরণ (উপাদান মুছে ফেলা):
//  let arr = [1, 2, 3, 4];
//  arr.splice(1, 2);  // 1 নম্বর ইনডেক্স থেকে ২টি উপাদান সরাবে
//  console.log(arr);  // আউটপুট: [1, 4]

// উদাহরণ (উপাদান যোগ করা):
//  let arr = [1, 4];
//  arr.splice(1, 0, 2, 3);  // 1 নম্বর ইনডেক্সে ২ এবং ৩ যোগ করবে
//  console.log(arr);  // আউটপুট: [1, 2, 3, 4]

// Time Complexity: O(n) (মধ্য থেকে উপাদান মুছে ফেললে বা যোগ করলে বাকি উপাদানগুলোকে
// পুনরায় সাজাতে হয়)।

// ----------------------------------------------------------------------------

// 6. slice(): অ্যারের একটি অংশ কপি করা
// slice() মেথড অ্যারের একটি নির্দিষ্ট অংশ কপি করে এবং সেই অংশের নতুন অ্যারে রিটার্ন করে।
// এটি মূল অ্যারেটির উপাদান পরিবর্তন করে না।

// সিনট্যাক্স:
//  array.slice(startIndex, endIndex);

// উদাহরণ:
//  let arr = [1, 2, 3, 4];
//  let newArr = arr.slice(1, 3);  // 1 থেকে 3 ইনডেক্সের মধ্যে থাকা উপাদান কপি করবে
//  console.log(newArr);  // আউটপুট: [2, 3]
//  console.log(arr);  // আউটপুট: [1, 2, 3, 4] (মূল অ্যারে অপরিবর্তিত থাকে)

// Time Complexity: O(n) (কারণ এটি নতুন অ্যারে তৈরি করে এবং উপাদানগুলো কপি করে)।
