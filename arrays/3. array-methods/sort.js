// sort() হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা কোনো অ্যারের উপাদানগুলোকে নির্দিষ্ট ক্রম অনুযায়ী সাজায়।
// এটি মূলত অ্যারের উপর সরাসরি পরিবর্তন আনে এবং পরিবর্তিত অ্যারেটি রিটার্ন করে।

// --------------------------------------------------------------------------

// sort() মেথডের বৈশিষ্ট্য
// - এটি মূল অ্যারের উপরেই পরিবর্তন করে (in-place) এবং সেই অ্যারেটিকেই রিটার্ন করে।
// - ডিফল্টভাবে, এটি উপাদানগুলোকে আসেন্ডিং অর্ডারে সাজায়।
// - ডিফল্ট sort() মেথডটি অ্যারের উপাদানগুলোকে স্ট্রিং হিসাবে বিবেচনা করে এবং Unicode অনুযায়ী সাজায়।

// --------------------------------------------------------------------------

// সিনট্যাক্স:
array.sort([compareFunction]);

// - array: যে অ্যারেটিকে সাজানো হবে।
// - compareFunction: (ঐচ্ছিক) একটি ফাংশন যা সাজানোর নিয়ম নির্ধারণ করে।

// --------------------------------------------------------------------------

// উদাহরণ (সংখ্যা নিয়ে):
let numbers = [3, 1, 4, 1, 5, 9];
numbers.sort();

console.log(numbers); // আউটপুট: [1, 1, 3, 4, 5, 9]

// এখানে, sort() মেথডটি সংখ্যা গুলোকে আসেন্ডিং অর্ডারে সাজিয়েছে।

// --------------------------------------------------------------------------

// স্ট্রিং নিয়ে উদাহরণ:
let fruits = ["banana", "apple", "mango", "grapes"];
fruits.sort();

console.log(fruits); // আউটপুট: ["apple", "banana", "grapes", "mango"]

// এখানে fruits অ্যারেটি অ্যালফাবেটিক অর্ডারে সাজানো হয়েছে।

// --------------------------------------------------------------------------

// সংখ্যার জন্য compareFunction ব্যবহার করে সাজানো
// ডিফল্ট sort() মেথডটি সংখ্যাকে স্ট্রিং হিসেবে বিবেচনা করে। তাই সঠিকভাবে সংখ্যা সাজানোর জন্য compareFunction ব্যবহার করতে হয়।
let numbers2 = [10, 5, 3, 20, 15];
numbers2.sort((a, b) => a - b);

console.log(numbers2); // আউটপুট: [3, 5, 10, 15, 20]

// এখানে, compareFunction হিসাবে (a, b) => a - b ব্যবহার করা হয়েছে। এটি দুইটি উপাদান a এবং b এর পার্থক্য দেখে ক্রম নির্ধারণ করে,
// যার ফলে সঠিকভাবে আসেন্ডিং অর্ডারে সাজানো যায়।

// --------------------------------------------------------------------------

// compareFunction কীভাবে কাজ করে
// 1. যদি a - b < 0 হয়, তাহলে a আগে থাকবে।
// 2. যদি a - b > 0 হয়, তাহলে b আগে থাকবে।
// 3. যদি a - b === 0 হয়, তাহলে কোনো পরিবর্তন হবে না।

// --------------------------------------------------------------------------

// ডিসেন্ডিং অর্ডারে সাজানোর জন্য উদাহরণ
// ডিসেন্ডিং অর্ডারে সাজাতে শুধু compareFunction এ b - a ব্যবহার করতে হবে।
let numbers3 = [10, 5, 3, 20, 15];
numbers3.sort((a, b) => b - a);

console.log(numbers3); // আউটপুট: [20, 15, 10, 5, 3]

// --------------------------------------------------------------------------

// sort() মেথডের সুবিধা:
// 1. সহজে সাজানো: অ্যারের উপাদানগুলোকে আসেন্ডিং বা ডিসেন্ডিং অর্ডারে সাজানো সহজ করে তোলে।
// 2. স্ট্রিং এবং সংখ্যা উভয়ের জন্য উপযুক্ত: স্ট্রিং ডিফল্টভাবে সাজানো হয়, আর সংখ্যা সঠিক ক্রমে সাজানোর জন্য compareFunction ব্যবহার করা যায়।

// --------------------------------------------------------------------------

// সতর্কতা:
// যেহেতু sort() মেথডটি মূল অ্যারে পরিবর্তন করে, তাই যদি মূল অ্যারে অপরিবর্তিত রাখতে চান, তবে অ্যারের কপি তৈরি করে তার উপর sort() মেথড ব্যবহার করতে পারেন।
let originalArray = [3, 1, 4, 1, 5];
let array = [...originalArray].sort((a, b) => a - b);

console.log(originalArray); // আউটপুট: [3, 1, 4, 1, 5]
console.log(array); // আউটপুট: [1, 1, 3, 4, 5]

// এখানে originalArray অপরিবর্তিত থাকে, আর array সাজানো অবস্থায় রিটার্ন হয়।
