// reduce() হলো জাভাস্ক্রিপ্টের একটি শক্তিশালী ইনবিল্ট মেথড, যা অ্যারের উপাদানগুলোকে একত্রিত করে
// একটি একক মানে পরিণত করে। এটি প্রতিটি উপাদানের উপর একটি ফাংশন চালায় এবং একটি
// "সংযোজন" মান রিটার্ন করে, যা একটানা পরবর্তী উপাদানের সঙ্গে সংযোজিত হতে থাকে।

// --------------------------------------------------------------------------

// reduce() এর সিনট্যাক্স:
array.reduce(function (accumulator, currentValue, currentIndex, array) {
  // কোড
}, initialValue);

// - accumulator: এটি একটি সংগ্রাহক যা পূর্ববর্তী উপাদান থেকে আসা ফাংশনের আউটপুট ধারণ করে।
// - currentValue: বর্তমান উপাদান।
// - currentIndex: বর্তমান উপাদানের ইনডেক্স নম্বর (ঐচ্ছিক)।
// - array: অ্যারেটি নিজেই (ঐচ্ছিক)।
// - initialValue: এটি ঐচ্ছিক, এবং এই মান দিয়ে সংগ্রাহক শুরু হয়। যদি না দেওয়া হয়, তবে প্রথম
//   উপাদান দিয়ে এটি শুরু হয়।

// --------------------------------------------------------------------------

// উদাহরণ:
// অ্যারের উপাদানগুলোর যোগফল বের করা:

let numbers = [1, 2, 3, 4, 5];

let sum = numbers.reduce(function (accumulator, currentValue) {
  return accumulator + currentValue;
}, 0);

console.log(sum); // আউটপুট: 15

// এখানে, reduce() মেথডটি অ্যারের প্রতিটি উপাদানকে একসঙ্গে যোগ করেছে এবং accumulator হিসেবে
// যোগফল ধরে রেখেছে। শুরুতে accumulator এর মান 0 ছিল, যেহেতু সেটি initialValue হিসেবে
// দেওয়া হয়েছে।

// --------------------------------------------------------------------------

// কিছু পয়েন্ট:
// 1. সংগ্রাহক (accumulator): reduce() মেথডটি প্রতিটি উপাদানের উপর প্রয়োগ হয় এবং প্রতিটি চক্রের
// শেষে সংগ্রাহকে আপডেট করে। এটি শেষ পর্যন্ত একটি একক মানে পরিণত হয়।

// 2. শুরু করার মান (initialValue): initialValue দেওয়া না হলে, প্রথম উপাদান সংগ্রাহকের প্রাথমিক
// মান হিসেবে ব্যবহার হয়। যদি দেওয়া হয়, তবে সেটি দিয়ে সংগ্রাহক শুরু হয়।

// 3. অ্যারে থেকে একক মান পাওয়া: reduce() মেথড ব্যবহার করে বিভিন্ন ধরণের একক মান পাওয়া যেতে
// পারে, যেমন যোগফল, গুণফল, অথবা একাধিক স্ট্রিং মিলে একটি নতুন স্ট্রিং তৈরি করা।

// --------------------------------------------------------------------------

// আরো উদাহরণ:
// অ্যারের সর্বোচ্চ মান বের করা:

let numbers2 = [1, 5, 2, 10, 3];

let max = numbers2.reduce(function (accumulator, currentValue) {
  return Math.max(accumulator, currentValue);
});

console.log(max); // আউটপুট: 10

// এখানে, reduce() প্রতিটি উপাদানের সাথে accumulator মানের তুলনা করে বড় মানটি রাখে এবং
// শেষে সর্বোচ্চ মান রিটার্ন করে।

// --------------------------------------------------------------------------

// অবজেক্টের অ্যারের সমষ্টি বের করা:
let products = [
  { name: "Laptop", price: 1000 },
  { name: "Phone", price: 500 },
  { name: "Tablet", price: 300 },
];

let totalPrice = products.reduce(function (accumulator, product) {
  return accumulator + product.price;
}, 0);

console.log(totalPrice); // আউটপুট: 1800

// এখানে, reduce() মেথডটি প্রতিটি প্রোডাক্টের দাম যোগ করে totalPrice হিসেবে সংগ্রাহক আপডেট
// করেছে।
