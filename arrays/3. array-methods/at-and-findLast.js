// 1. at() মেথড:
// at() মেথডটি একটি অ্যারে থেকে নির্দিষ্ট ইনডেক্সে থাকা উপাদানটি রিটার্ন করে। এই মেথডটি ধাপে ধাপে অ্যারে ইন্ডেক্সে
// পৌঁছানোর পরিবর্তে, আপনি একটি নেগেটিভ ইনডেক্স ব্যবহার করতে পারবেন। এর মাধ্যমে আপনি অ্যারের শেষে
// থেকেও উপাদান অ্যাক্সেস করতে পারবেন। উদাহরণস্বরূপ, -1 হলো শেষ উপাদান, -2 হলো শেষের আগে উপাদান, ইত্যাদি।

// --------------------------------------------------------------------------

// সিনট্যাক্স:
array.at(index);

// এখানে, index হতে পারে একটি পজিটিভ বা নেগেটিভ সংখ্যা।

// --------------------------------------------------------------------------

// উদাহরণ:
let numbers = [10, 20, 30, 40, 50];
console.log(numbers.at(2)); // আউটপুট: 30 (পজিটিভ ইনডেক্স)
console.log(numbers.at(-1)); // আউটপুট: 50 (শেষ উপাদান)
console.log(numbers.at(-2)); // আউটপুট: 40 (শেষের পরের উপাদান)

// এখানে at() মেথডটি সরাসরি ইনডেক্স অনুযায়ী উপাদান রিটার্ন করে এবং আপনি অ্যারের শেষের উপাদানও সহজেই অ্যাক্সেস করতে পারেন নেগেটিভ ইনডেক্স দিয়ে।

// --------------------------------------------------------------------------

// 2. findLast() মেথড:
// findLast() মেথডটি একটি অ্যারে থেকে শেষের দিক থেকে একটি উপাদান খুঁজে বের করে এবং সেই উপাদানটি রিটার্ন করে,
// যা একটি নির্দিষ্ট শর্ত পূর্ণ করে। এটি find() মেথডের মতই কাজ করে, তবে এটি অ্যারের শেষ থেকে শুরু করে খোঁজ শুরু করে।

// --------------------------------------------------------------------------

// সিনট্যাক্স:
array.findLast(callback);

// এখানে, callback একটি ফাংশন যা প্রতিটি উপাদান নিয়ে চলে এবং শর্তের সাথে মিললে findLast() সেই উপাদানটি রিটার্ন করে।

// --------------------------------------------------------------------------

// উদাহরণ:
let numbers2 = [1, 2, 3, 4, 5, 6];
let lastEven = numbers2.findLast((num) => num % 2 === 0);
console.log(lastEven); // আউটপুট: 6 (শেষের দিক থেকে প্রথম even number)

// এখানে findLast() মেথডটি numbers অ্যারে থেকে শেষের দিকে গিয়ে প্রথম even number (6) খুঁজে বের করেছে।
// এটি একেবারে find() এর মতোই কাজ করে, তবে শুধুমাত্র শেষ থেকে প্রথম উপাদানটি খুঁজে বের করে।
