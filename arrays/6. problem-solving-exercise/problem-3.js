// Write a function that separates only the even numbers from an array.

// Approach 1: Using for Loop
function seperateEvenNums(arr) {
  if (arr.length === 0) return [];
  let newArr = [];
  for (let i = 0; i <= arr.length - 1; i++) {
    if (arr[i] % 2 === 0) {
      newArr.push(arr[i]);
    }
  }
  return newArr;
}

const array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log(seperateEvenNums(array));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// 1. একটি নতুন অ্যারে newArr তৈরি করা হয়েছে।
// 2. প্রতিটি উপাদান চেক করা হচ্ছে, যদি উপাদানটি ২ দ্বারা বিভাজ্য হয় (বাকি 0), তাহলে সেটি জোড়।
// 3. জোড় উপাদান newArr অ্যারেতে যোগ করা হচ্ছে।
// 4. শেষে newArr রিটার্ন করা হচ্ছে।

// ---------------------------------------------------------------------------

// Approach 2: Using filter() Method
function filterEvenNumbers(arr) {
  return arr.filter((num) => num % 2 === 0);
}

const numbers = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
console.log(filterEvenNumbers(numbers));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// 1. filter() মেথড একটি ক্যালব্যাক ফাংশন ব্যবহার করে।
// 2. প্রতিটি উপাদান চেক করা হয়। যদি num % 2 === 0 হয়, তাহলে সেটি নতুন অ্যারেতে যোগ করা হয়।
// 3. অবশেষে নতুন অ্যারে রিটার্ন করা হয়।

// ---------------------------------------------------------------------------

// Edge Case: Empty Array
// - যদি ইনপুট অ্যারে ফাঁকা হয়, উভয় পদ্ধতিই ফাঁকা অ্যারে [] রিটার্ন করবে কারণ চেক করার মতো কোনো উপাদান নেই।

// ---------------------------------------------------------------------------

// Time Complexity:
// for লুপ:
// - O(n), কারণ প্রতিটি উপাদান একবার চেক করা হয়।

// ---------------------------------------------------------------------------

// filter():
// - O(n), কারণ এটি একইভাবে প্রতিটি উপাদান চেক করে।

// ---------------------------------------------------------------------------

// Space Complexity:
// - উভয় পদ্ধতিতে নতুন অ্যারে তৈরি করতে অতিরিক্ত স্পেস ব্যবহার করা হয়, যা O(n)।
