// Write a function that removes the first element from an array (shift).

// Approach 1: Using shift() Method
function removeValue(arr) {
  arr.shift(); // shift() মেথড ব্যবহার করে প্রথম উপাদান সরানো হয়েছে
  return arr;
}

const array = [1, 2, 3, 4];
console.log(removeValue(array));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// 1. shift() সরাসরি প্রথম উপাদানটি সরিয়ে দেয় এবং বাকি উপাদানগুলো একটি ধাপ বাঁ দিকে সরিয়ে নেয়।
// 2. এটি একটি in-place operation, অর্থাৎ মূল অ্যারে পরিবর্তিত হয়।

// ---------------------------------------------------------------------------

// Approach 2: Manual Removal
function removeFirstElementManual(arr) {
  if (arr.length > 0) {
    for (let i = 0; i < arr.length - 1; i++) {
      arr[i] = arr[i + 1]; // এক ধাপ বাঁ দিকে সরানো
    }
    arr.length = arr.length - 1; // অ্যারের দৈর্ঘ্য কমানো
  }
  return arr;
}

const nums = [5, 6, 7, 8];
console.log(removeFirstElementManual(nums));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// 1. একটি for লুপ ব্যবহার করে বাকি উপাদানগুলো এক ধাপ করে বাঁ দিকে সরানো হয়েছে।
// 2. শেষ উপাদানটি বাদ দেওয়ার জন্য অ্যারের দৈর্ঘ্য কমানো হয়েছে।

// ---------------------------------------------------------------------------

// Edge Case: Empty Array
// ফাঁকা অ্যারে থাকলে:
// - shift() মেথড: কোনো ত্রুটি ছাড়াই কাজ করে এবং অ্যারে অপরিবর্তিত থাকে।
// - ম্যানুয়াল পদ্ধতি: একইভাবে কোনো ত্রুটি ছাড়াই কাজ করবে।

// ---------------------------------------------------------------------------

// Time Complexity:
// - shift() মেথড: O(n), কারণ প্রতিটি উপাদানকে বাঁ দিকে সরানোর জন্য n অপারেশন প্রয়োজন।
// - ম্যানুয়াল পদ্ধতি: O(n), কারণ লুপ ব্যবহার করে উপাদান সরানো হচ্ছে।

// ---------------------------------------------------------------------------

// Space Complexity:
// - উভয় পদ্ধতিতে অতিরিক্ত স্পেস ব্যবহার করা হয় না, তাই স্পেস কমপ্লেক্সিটি O(1)।
