// Given an array and a specified number, find the smallest subarray with a sum equal to or greater than that number.

function minSubarrayLength(arr, S) {
  let i = 0, // উইন্ডোর শুরুর পয়েন্টার
    sum = 0, // বর্তমান উইন্ডোর যোগফল
    minLength = Infinity; // সর্বনিম্ন দৈর্ঘ্য (ইনফিনিটি দিয়ে শুরু)
  for (let j = 0; j < arr.length; j++) {
    sum += arr[j]; // উইন্ডোর মধ্যে উপাদান যোগ করো

    // যখন \( sum \) \( S \)-এর সমান বা বড় হয়
    while (sum >= S) {
      minLength = Math.min(minLength, j - i + 1); // সর্বনিম্ন দৈর্ঘ্য আপডেট করো
      sum -= arr[i]; // উইন্ডোর শুরু থেকে উপাদান বাদ দাও
      i++; // উইন্ডোর শুরু সরাও
    }
  }

  // যদি কোনো সাবঅ্যারে না পাওয়া যায়
  return minLength === Infinity ? 0 : minLength;
}

const array = [2, 3, 1, 2, 4, 3];
console.log(minSubarrayLength(array, 7));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// - i এবং j পয়েন্টার দিয়ে উইন্ডোর পরিসর চিহ্নিত করা হয়েছে।
// - sum দিয়ে উইন্ডোর বর্তমান যোগফল সংরক্ষণ করা হয়েছে।
// - while(sum>=S):
//   - j−i+1 দিয়ে বর্তমান উইন্ডোর দৈর্ঘ্য হিসাব করে সর্বনিম্ন দৈর্ঘ্য হিসেবে আপডেট করা হয়েছে।
//   - i++ করে উইন্ডোর বাম দিক সরানো হয়েছে।
// - যদি কোনো উইন্ডো S-এর সমান বা বড় না হয়, তাহলে minLength-এর মান ইনফিনিটি থেকে পরিবর্তিত হবে না। সেক্ষেত্রে 0 রিটার্ন করা হয়েছে।

// ---------------------------------------------------------------------------

// টাইম কমপ্লেক্সিটি:
// - O(n) — প্রতিটি উপাদান একবার যোগ এবং একবার বাদ দেওয়া হয়।

// ---------------------------------------------------------------------------

// স্পেস কমপ্লেক্সিটি:
// - O(1) — কোনো অতিরিক্ত স্পেস ব্যবহৃত হয়নি।
