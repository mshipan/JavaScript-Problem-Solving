// Write a function that adds new elements to the middle of an array and removes existing ones (splice).

function modifyArray(arr, startIndex, deleteCount, ...newElements) {
  arr.splice(startIndex, deleteCount, ...newElements);
  // startIndex: কোন পজিশন থেকে শুরু হবে
  // deleteCount: কতগুলো উপাদান মুছে ফেলা হবে
  // newElements: নতুন উপাদান যা যোগ করা হবে
  return arr;
}

const array = [1, 6, 7, 4];
console.log(modifyArray(array, 1, 2, 2, 3));

// ---------------------------------------------------------------------------

// ব্যাখ্যা:
// splice(startIndex, deleteCount, ...newElements):
// - startIndex: কোন পজিশন থেকে মুছে ফেলা বা যোগ করা শুরু হবে।
// - deleteCount: কতগুলো উপাদান মুছে ফেলা হবে।
// - newElements: নতুন উপাদান যা নির্দিষ্ট পজিশনে যোগ করা হবে।

// ---------------------------------------------------------------------------

// উদাহরণ ব্যাখ্যা:
// Input: [1, 6, 7, 4], startIndex=1, deleteCount=2, newElements=[2, 3]
// - startIndex=1 থেকে শুরু করে ২টি উপাদান সরানো হয়েছে (6 এবং 7)।
// - 2 এবং 3 নতুন উপাদান হিসেবে যোগ করা হয়েছে।
// - Output: [1, 2, 3, 4].

// ---------------------------------------------------------------------------

// Edge Cases:
// 1. deleteCount শূন্য হলে: শুধু নতুন উপাদান যোগ করা হবে।
// 2. startIndex অ্যারের আকারের বাইরে হলে: নতুন উপাদানগুলো অ্যারের শেষে যোগ করা হবে।
// 3. অ্যান এম্পটি অ্যারে: নতুন উপাদান যোগ করা যাবে, মুছতে কিছুই থাকবে না।

// ---------------------------------------------------------------------------

// Time Complexity:
// - Worst Case: O(n), কারণ উপাদান সরানোর এবং যোগ করার সময় অ্যারের বাকি অংশকে পরিবর্তন করতে হয়।
// - Best Case: O(1), যদি কোনো উপাদান সরানো বা যোগ করার প্রয়োজন না হয়।

// ---------------------------------------------------------------------------

// Space Complexity:
// - In-place Operation: কোনো অতিরিক্ত স্পেস ব্যবহার হয় না, তাই স্পেস কমপ্লেক্সিটি O(1)।
