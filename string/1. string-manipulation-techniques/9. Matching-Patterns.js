// স্ট্রিং-এর নির্দিষ্ট ধাঁচ বা প্যাটার্ন চিহ্নিত করতে আমরা প্যাটার্ন ম্যাচিং বা রেগুলার এক্সপ্রেশন (Regular Expression) ব্যবহার করি।
// এটি জাভাস্ক্রিপ্টে টেক্সট প্রক্রিয়াজাত করার একটি শক্তিশালী উপায়।

// ----------------------------------------------------------------------------

// প্যাটার্ন ম্যাচিং কীভাবে কাজ করে?
// প্যাটার্ন ম্যাচিংয়ের মাধ্যমে আপনি স্ট্রিং-এর নির্দিষ্ট অংশ খুঁজে বের করতে, যাচাই করতে বা তার অংশ পরিবর্তন করতে পারেন।
// এটি সাধারণত match(), search(), replace(), এবং test() মেথডের মাধ্যমে করা হয়।

// ----------------------------------------------------------------------------

// প্যাটার্ন ম্যাচিংয়ের সাধারণ পদ্ধতি

// ১. match() মেথড
// একটি স্ট্রিং-এর মধ্যে নির্দিষ্ট প্যাটার্ন খুঁজে বের করার জন্য match() ব্যবহার করা হয়। এটি একটি অ্যারে রিটার্ন করে।

// সিনট্যাক্স:
string.match(regexp);

// উদাহরণ:
const text = "The rain in Spain stays mainly in the plain.";
const result = text.match(/ain/g);
console.log(result);
// Output: ['ain', 'ain', 'ain']

// ২. search() মেথড
// স্ট্রিং-এর মধ্যে একটি প্যাটার্ন খুঁজে প্রথম অবস্থান রিটার্ন করে। যদি মিলে না যায়, তাহলে এটি -1 রিটার্ন করে।

// সিনট্যাক্স:
string.search(regexp);

// উদাহরণ:
const text1 = "The quick brown fox";
const position = text1.search(/quick/);
console.log(position);
// Output: 4

// ----------------------------------------------------------------------------

// রেগুলার এক্সপ্রেশন সিনট্যাক্স
// রেগুলার এক্সপ্রেশনের মাধ্যমে আমরা কীভাবে প্যাটার্ন তৈরি করতে পারি তা নিচে দেওয়া হলো:

// ১. প্যাটার্নের ধরন
// - সাধারণ প্যাটার্ন: নির্দিষ্ট শব্দ বা চিহ্ন খুঁজে বের করে।
//   উদাহরণ: /rain/
// - ফ্ল্যাগ: প্যাটার্নে অতিরিক্ত কার্যকারিতা যোগ করে।
//   উদাহরণ:
//   - g (global): স্ট্রিং-এর সব মিলে যাওয়ার অংশ খুঁজে বের করে।
//   - i (case-insensitive): ছোট ও বড় অক্ষরের পার্থক্য উপেক্ষা করে।

const text2 = "Hello hello HELLO";
const matches = text2.match(/hello/gi);
console.log(matches);
// Output: ['Hello', 'hello', 'HELLO']

// ----------------------------------------------------------------------------

// কিছু গুরুত্বপূর্ণ প্যাটার্ন
// - . (dot): যেকোনো একক অক্ষর নির্দেশ করে।
//   উদাহরণ: /h.llo/ মিলে যাবে hello, hallo ইত্যাদির সঙ্গে।

// - * (star): পূর্ববর্তী অক্ষরের 0 বা তার বেশি পুনরাবৃত্তি নির্দেশ করে।
//   উদাহরণ: /he*llo/ মিলে যাবে hllo, hello, heeeello ইত্যাদির সঙ্গে।

// - ^ (caret): স্ট্রিং-এর শুরু নির্দেশ করে।
//   উদাহরণ: /^The/ মিলে যাবে The rain-এর সঙ্গে, কিন্তু In The rain-এর সঙ্গে নয়।

// - $ (dollar): স্ট্রিং-এর শেষ নির্দেশ করে।
//   উদাহরণ: /rain$/ মিলে যাবে the rain-এর সঙ্গে, কিন্তু rain falls-এর সঙ্গে নয়।

// ----------------------------------------------------------------------------

// প্যাটার্ন ম্যাচিংয়ের উদাহরণ

// ১. নির্দিষ্ট প্যাটার্ন খোঁজা

const text3 = "JavaScript is amazing!";
const result1 = text3.match(/is/);
console.log(result1);
// Output: ['is', index: 11, input: 'JavaScript is amazing!', groups: undefined]

// ২. কেস-ইনসেনসিটিভ সার্চ

const text4 = "The rain in Spain";
const result2 = text4.match(/RAIN/i);
console.log(result2);
// Output: ['rain']

// ৩. টেক্সট ভ্যালিডেশন (যেমন, ইমেইল চেক করা)

const email = "user@example.com";
const isValid = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/.test(email);
console.log(isValid);
// Output: true

// ----------------------------------------------------------------------------

// স্ট্রিং রিপ্লেসমেন্টে রেগুলার এক্সপ্রেশন
// প্যাটার্ন মিলে যাওয়ার পর তা অন্য কোনো শব্দ বা চিহ্ন দিয়ে বদলানোর জন্য replace() ব্যবহার করা হয়।

// উদাহরণ:

const text5 = "The sky is blue. The ocean is blue.";
const newText = text5.replace(/blue/g, "green");
console.log(newText);
// Output: "The sky is green. The ocean is green."
